"""
Users Router - Generated by bffgen
Handles user favorites and watchlist endpoints
"""
from fastapi import APIRouter, HTTPException, Body, Depends
from typing import Dict, Any
import logging

from services.users_service import UsersService
from dependencies import get_current_user

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/users", tags=["Users"])

# Initialize service
users_service = UsersService()


@router.get("/favorites")
async def get_favorites(user_id: str = Depends(get_current_user)):
    """
    Get user's favorite movies
    
    Returns:
        List of user's favorite movies
    """
    try:
        result = await users_service.get_favorites()
        return result
    except Exception as e:
        logger.error(f"Error fetching favorites for user {user_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/favorites")
async def add_favorite(
    payload: Dict[str, Any] = Body(...),
    user_id: str = Depends(get_current_user)
):
    """
    Add a movie to favorites
    
    Args:
        payload: Request body containing movie information
        
    Returns:
        Updated favorites list
    """
    try:
        result = await users_service.add_favorite(payload=payload)
        return result
    except Exception as e:
        logger.error(f"Error adding favorite for user {user_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.delete("/favorites/{movie_id}")
async def delete_favorite(
    movie_id: int,
    user_id: str = Depends(get_current_user)
):
    """
    Remove a movie from favorites
    
    Args:
        movie_id: ID of the movie to remove
        
    Returns:
        Success message
    """
    try:
        result = await users_service.delete_favorite(movie_id=movie_id)
        return result
    except Exception as e:
        logger.error(f"Error removing favorite {movie_id} for user {user_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/watchlist")
async def get_watchlist(user_id: str = Depends(get_current_user)):
    """
    Get user's watchlist
    
    Returns:
        List of movies in user's watchlist
    """
    try:
        result = await users_service.get_watchlist()
        return result
    except Exception as e:
        logger.error(f"Error fetching watchlist for user {user_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/watchlist")
async def add_to_watchlist(
    payload: Dict[str, Any] = Body(...),
    user_id: str = Depends(get_current_user)
):
    """
    Add a movie to watchlist
    
    Args:
        payload: Request body containing movie information
        
    Returns:
        Updated watchlist
    """
    try:
        result = await users_service.add_to_watchlist(payload=payload)
        return result
    except Exception as e:
        logger.error(f"Error adding to watchlist for user {user_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

