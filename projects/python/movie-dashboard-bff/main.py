"""
Movie Dashboard BFF - FastAPI Backend for Frontend
Generated by bffgen v2.1.0
"""
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import logging

from config import settings
from middleware.logging_middleware import LoggingMiddleware
from middleware.auth_middleware import AuthMiddleware

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifespan context manager for startup and shutdown events"""
    logger.info("Starting Movie Dashboard BFF...")
    yield
    logger.info("Shutting down Movie Dashboard BFF...")


app = FastAPI(
    title=settings.PROJECT_NAME,
    description="Backend for Frontend service for Movie Dashboard",
    version="1.0.0",
    lifespan=lifespan,
)

# CORS Configuration
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Custom Middleware
app.add_middleware(LoggingMiddleware)
# app.add_middleware(AuthMiddleware)  # Uncomment to enable authentication

# Health Check
@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "service": "movie-dashboard-bff",
        "version": "1.0.0"
    }

# === BFFGEN:ROUTERS:START ===
# Generated routers will be registered below this marker
# Do not remove this marker
from routers import movies_router, users_router, dashboard_router

app.include_router(movies_router.router)
app.include_router(users_router.router)
# === BFFGEN:ROUTERS:END ===

# Custom routers (not auto-generated)
app.include_router(dashboard_router.router)


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=settings.PORT,
        reload=True
    )

