"""
Users Service - Generated by bffgen
HTTP client for User Service backend
"""
import httpx
import logging
from typing import Dict, Any
from config import settings

logger = logging.getLogger(__name__)


class UsersService:
    """Service class for User Service operations"""
    
    def __init__(self):
        self.base_url = "http://localhost:3001"
        self.timeout = 10.0
        self.client = None
    
    async def _get_client(self) -> httpx.AsyncClient:
        """Get or create HTTP client"""
        if self.client is None:
            self.client = httpx.AsyncClient(timeout=self.timeout)
        return self.client
    
    async def get_favorites(self) -> Dict[str, Any]:
        """
        Get user's favorite movies
        
        Returns:
            API response with favorites list
        """
        client = await self._get_client()
        url = f"{self.base_url}/favorites"
        
        logger.info("Fetching user favorites")
        response = await client.get(url)
        response.raise_for_status()
        
        return response.json()
    
    async def add_favorite(self, payload: Dict[str, Any]) -> Dict[str, Any]:
        """
        Add a movie to favorites
        
        Args:
            payload: Request body containing movie information
            
        Returns:
            API response
        """
        client = await self._get_client()
        url = f"{self.base_url}/favorites"
        
        logger.info(f"Adding movie to favorites: {payload.get('movie_id')}")
        response = await client.post(url, json=payload)
        response.raise_for_status()
        
        return response.json()
    
    async def delete_favorite(self, movie_id: int) -> Dict[str, Any]:
        """
        Remove a movie from favorites
        
        Args:
            movie_id: ID of the movie to remove
            
        Returns:
            API response
        """
        client = await self._get_client()
        url = f"{self.base_url}/favorites/{movie_id}"
        
        logger.info(f"Removing movie {movie_id} from favorites")
        response = await client.delete(url)
        response.raise_for_status()
        
        return response.json()
    
    async def get_watchlist(self) -> Dict[str, Any]:
        """
        Get user's watchlist
        
        Returns:
            API response with watchlist
        """
        client = await self._get_client()
        url = f"{self.base_url}/watchlist"
        
        logger.info("Fetching user watchlist")
        response = await client.get(url)
        response.raise_for_status()
        
        return response.json()
    
    async def add_to_watchlist(self, payload: Dict[str, Any]) -> Dict[str, Any]:
        """
        Add a movie to watchlist
        
        Args:
            payload: Request body containing movie information
            
        Returns:
            API response
        """
        client = await self._get_client()
        url = f"{self.base_url}/watchlist"
        
        logger.info(f"Adding movie to watchlist: {payload.get('movie_id')}")
        response = await client.post(url, json=payload)
        response.raise_for_status()
        
        return response.json()
    
    async def close(self):
        """Close HTTP client"""
        if self.client:
            await self.client.aclose()

