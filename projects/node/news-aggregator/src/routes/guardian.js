/**
 * guardian Service Routes (Express)
 * Auto-generated by bffgen
 */

const express = require("express");
const router = express.Router();
const { asyncHandler } = require("../middleware/errorHandler");
const { authenticate } = require("../middleware/auth");

router.get(
  "/api/news/guardian/headlines",
  asyncHandler(async (req, res) => {
    try {
      const baseURL =
        process.env.GUARDIAN_URL || "https://content.guardianapis.com";
      const apiKey = process.env.GUARDIAN_API_KEY;

      // Build query string with API key
      const queryParams = new URLSearchParams({
        ...req.query,
        "api-key": apiKey,
      });

      const response = await fetch(`${baseURL}/search?${queryParams}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          ...(req.headers.authorization && {
            Authorization: req.headers.authorization,
          }),
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        return res.status(response.status).json({
          error: "guardian service error",
          message: `Backend returned status ${response.status}`,
          details: errorText,
        });
      }

      const data = await response.json();
      res.json(data);
    } catch (error) {
      console.error("guardian service error:", error);
      res.status(500).json({
        error: "Internal Server Error",
        message: "Failed to fetch from guardian service",
      });
    }
  })
);

router.get(
  "/api/news/guardian/search",
  asyncHandler(async (req, res) => {
    try {
      const baseURL =
        process.env.GUARDIAN_URL || "https://content.guardianapis.com";
      const apiKey = process.env.GUARDIAN_API_KEY;

      // Build query string with API key and search query
      const queryParams = new URLSearchParams({
        ...req.query,
        "api-key": apiKey,
      });

      const response = await fetch(`${baseURL}/search?${queryParams}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          ...(req.headers.authorization && {
            Authorization: req.headers.authorization,
          }),
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        return res.status(response.status).json({
          error: "guardian service error",
          message: `Backend returned status ${response.status}`,
          details: errorText,
        });
      }

      const data = await response.json();
      res.json(data);
    } catch (error) {
      console.error("guardian service error:", error);
      res.status(500).json({
        error: "Internal Server Error",
        message: "Failed to fetch from guardian service",
      });
    }
  })
);

module.exports = router;
