/**
 * Base HTTP Client Service
 * Auto-generated by bffgen
 * 
 * Centralized HTTP client with retry logic, timeouts, and error handling
 */

const logger = require('../utils/logger');

class HttpClient {
  constructor(baseURL, options = {}) {
    this.baseURL = baseURL;
    this.timeout = options.timeout || 30000; // 30 seconds default
    this.retries = options.retries || 3;
    this.retryDelay = options.retryDelay || 1000;
  }

  /**
   * Make HTTP request with retry logic
   */
  async request(path, options = {}) {
    const url = `${this.baseURL}${path}`;
    const config = {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    };

    let lastError;
    for (let attempt = 1; attempt <= this.retries; attempt++) {
      try {
        logger.debug(`HTTP ${options.method || 'GET'} ${url} (attempt ${attempt}/${this.retries})`);
        
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), this.timeout);

        const response = await fetch(url, {
          ...config,
          signal: controller.signal
        });

        clearTimeout(timeoutId);

        if (!response.ok) {
          const error = new Error(`HTTP ${response.status}: ${response.statusText}`);
          error.status = response.status;
          error.response = response;
          
          // Don't retry client errors (4xx)
          if (response.status >= 400 && response.status < 500) {
            throw error;
          }
          
          lastError = error;
          logger.warn(`Request failed (attempt ${attempt}/${this.retries}):`, error.message);
          
          if (attempt < this.retries) {
            await this.delay(this.retryDelay * attempt);
            continue;
          }
          throw error;
        }

        const contentType = response.headers.get('content-type');
        if (contentType && contentType.includes('application/json')) {
          return await response.json();
        }
        
        return await response.text();
      } catch (error) {
        if (error.name === 'AbortError') {
          logger.error(`Request timeout after ${this.timeout}ms: ${url}`);
          error.message = `Request timeout after ${this.timeout}ms`;
          error.status = 408;
        }
        
        lastError = error;
        
        if (attempt < this.retries && error.status >= 500) {
          logger.warn(`Retrying after error (attempt ${attempt}/${this.retries}):`, error.message);
          await this.delay(this.retryDelay * attempt);
          continue;
        }
        
        throw error;
      }
    }

    throw lastError;
  }

  /**
   * GET request
   */
  async get(path, options = {}) {
    return this.request(path, { ...options, method: 'GET' });
  }

  /**
   * POST request
   */
  async post(path, data, options = {}) {
    return this.request(path, {
      ...options,
      method: 'POST',
      body: data ? JSON.stringify(data) : undefined
    });
  }

  /**
   * PUT request
   */
  async put(path, data, options = {}) {
    return this.request(path, {
      ...options,
      method: 'PUT',
      body: data ? JSON.stringify(data) : undefined
    });
  }

  /**
   * PATCH request
   */
  async patch(path, data, options = {}) {
    return this.request(path, {
      ...options,
      method: 'PATCH',
      body: data ? JSON.stringify(data) : undefined
    });
  }

  /**
   * DELETE request
   */
  async delete(path, options = {}) {
    return this.request(path, { ...options, method: 'DELETE' });
  }

  /**
   * Delay helper for retries
   */
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

module.exports = HttpClient;

