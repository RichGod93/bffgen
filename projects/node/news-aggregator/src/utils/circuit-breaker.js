/**
 * Circuit Breaker Utility
 * Auto-generated by bffgen
 * 
 * Prevents cascade failures with circuit breaker pattern
 */

const logger = require('./logger');

class CircuitBreaker {
  constructor(options = {}) {
    this.failureThreshold = options.failureThreshold || 5;
    this.resetTimeout = options.resetTimeout || 60000; // 1 minute
    this.monitoringPeriod = options.monitoringPeriod || 10000; // 10 seconds
    
    this.state = 'CLOSED'; // CLOSED, OPEN, HALF_OPEN
    this.failures = 0;
    this.successes = 0;
    this.nextAttempt = Date.now();
    this.stats = { total: 0, failed: 0, succeeded: 0 };
  }

  /**
   * Execute function with circuit breaker protection
   * @param {Function} fn - Function to execute
   * @param {Function} fallback - Optional fallback function
   * @returns {Promise<any>}
   */
  async execute(fn, fallback = null) {
    if (this.state === 'OPEN') {
      if (Date.now() < this.nextAttempt) {
        logger.warn('Circuit breaker OPEN, using fallback');
        if (fallback) {
          return fallback();
        }
        throw new Error('Circuit breaker is OPEN');
      }
      this.state = 'HALF_OPEN';
      logger.info('Circuit breaker entering HALF_OPEN state');
    }

    try {
      const result = await fn();
      this.onSuccess();
      return result;
    } catch (error) {
      this.onFailure();
      if (fallback) {
        logger.warn('Service failed, using fallback:', error.message);
        return fallback();
      }
      throw error;
    }
  }

  /**
   * Handle successful execution
   */
  onSuccess() {
    this.failures = 0;
    this.stats.succeeded++;
    this.stats.total++;
    
    if (this.state === 'HALF_OPEN') {
      this.state = 'CLOSED';
      logger.info('Circuit breaker CLOSED after successful recovery');
    }
  }

  /**
   * Handle failed execution
   */
  onFailure() {
    this.failures++;
    this.stats.failed++;
    this.stats.total++;

    if (this.failures >= this.failureThreshold) {
      this.state = 'OPEN';
      this.nextAttempt = Date.now() + this.resetTimeout;
      logger.error(`Circuit breaker OPEN after ${this.failures} failures. Will retry at ${new Date(this.nextAttempt).toISOString()}`);
    }
  }

  /**
   * Get current circuit breaker state
   * @returns {Object}
   */
  getState() {
    return {
      state: this.state,
      failures: this.failures,
      stats: this.stats,
      nextAttempt: this.state === 'OPEN' ? new Date(this.nextAttempt).toISOString() : null
    };
  }

  /**
   * Reset circuit breaker to initial state
   */
  reset() {
    this.state = 'CLOSED';
    this.failures = 0;
    this.successes = 0;
    this.nextAttempt = Date.now();
    logger.info('Circuit breaker manually reset');
  }

  /**
   * Force circuit breaker to OPEN state
   */
  forceOpen() {
    this.state = 'OPEN';
    this.nextAttempt = Date.now() + this.resetTimeout;
    logger.warn('Circuit breaker manually forced OPEN');
  }
}

module.exports = CircuitBreaker;

