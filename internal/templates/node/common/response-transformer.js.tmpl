/**
 * Response Transformer Utility
 * Auto-generated by bffgen
 * 
 * Utilities for transforming API responses for frontend consumption
 */

class ResponseTransformer {
  /**
   * Pick specific fields from object
   * @param {Object} obj - Source object
   * @param {Array<string>} fields - Fields to pick
   * @returns {Object}
   */
  static pick(obj, fields) {
    if (!obj) return obj;
    return fields.reduce((acc, field) => {
      if (obj.hasOwnProperty(field)) {
        acc[field] = obj[field];
      }
      return acc;
    }, {});
  }

  /**
   * Omit specific fields from object
   * @param {Object} obj - Source object
   * @param {Array<string>} fields - Fields to omit
   * @returns {Object}
   */
  static omit(obj, fields) {
    if (!obj) return obj;
    const result = { ...obj };
    fields.forEach(field => delete result[field]);
    return result;
  }

  /**
   * Rename fields in object
   * @param {Object} obj - Source object
   * @param {Object} mapping - Mapping of old to new field names
   * @returns {Object}
   */
  static rename(obj, mapping) {
    if (!obj) return obj;
    const result = { ...obj };
    Object.entries(mapping).forEach(([oldKey, newKey]) => {
      if (result.hasOwnProperty(oldKey)) {
        result[newKey] = result[oldKey];
        delete result[oldKey];
      }
    });
    return result;
  }

  /**
   * Flatten nested object
   * @param {Object} obj - Object to flatten
   * @param {string} prefix - Prefix for flattened keys
   * @returns {Object}
   */
  static flatten(obj, prefix = '') {
    return Object.keys(obj).reduce((acc, key) => {
      const prefixedKey = prefix ? `${prefix}.${key}` : key;
      if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key])) {
        Object.assign(acc, this.flatten(obj[key], prefixedKey));
      } else {
        acc[prefixedKey] = obj[key];
      }
      return acc;
    }, {});
  }

  /**
   * Merge multiple service responses
   * @param {...Object} responses - Objects to merge
   * @returns {Object}
   */
  static merge(...responses) {
    return Object.assign({}, ...responses);
  }

  /**
   * Transform array of objects using transformer function
   * @param {Array} arr - Array to transform
   * @param {Function} transformer - Transformer function
   * @returns {Array}
   */
  static transformArray(arr, transformer) {
    if (!Array.isArray(arr)) return arr;
    return arr.map(item => transformer(item));
  }

  /**
   * Add computed fields to object
   * @param {Object} obj - Source object
   * @param {Object} computations - Mapping of field name to compute function
   * @returns {Object}
   */
  static addComputedFields(obj, computations) {
    const result = { ...obj };
    Object.entries(computations).forEach(([field, computeFn]) => {
      result[field] = computeFn(obj);
    });
    return result;
  }

  /**
   * Filter sensitive data from object
   * @param {Object} obj - Source object
   * @param {Array<string>} sensitiveFields - Fields to remove
   * @returns {Object}
   */
  static sanitize(obj, sensitiveFields = ['password', 'token', 'secret', 'apiKey', 'accessToken', 'refreshToken']) {
    return this.omit(obj, sensitiveFields);
  }

  /**
   * Deep clone an object
   * @param {Object} obj - Object to clone
   * @returns {Object}
   */
  static clone(obj) {
    return JSON.parse(JSON.stringify(obj));
  }

  /**
   * Map object keys using transformer function
   * @param {Object} obj - Source object
   * @param {Function} transformer - Key transformer function
   * @returns {Object}
   */
  static mapKeys(obj, transformer) {
    if (!obj) return obj;
    return Object.keys(obj).reduce((acc, key) => {
      acc[transformer(key)] = obj[key];
      return acc;
    }, {});
  }

  /**
   * Map object values using transformer function
   * @param {Object} obj - Source object
   * @param {Function} transformer - Value transformer function
   * @returns {Object}
   */
  static mapValues(obj, transformer) {
    if (!obj) return obj;
    return Object.keys(obj).reduce((acc, key) => {
      acc[key] = transformer(obj[key], key);
      return acc;
    }, {});
  }
}

module.exports = ResponseTransformer;

