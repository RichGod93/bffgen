/**
 * Integration Test Template
 * Auto-generated by bffgen
 * 
 * This template shows how to write integration tests that call real backend services
 * Uncomment and customize as needed
 */

const request = require('supertest');
const nock = require('nock');

// Import your app
// const app = require('../../src/index');

describe('Integration Tests - {{.ServiceName}}', () => {
  beforeAll(async () => {
    // Setup: Start mock backend or connect to test backend
    // Option 1: Use nock to mock HTTP calls
    // Option 2: Start actual backend services in Docker
  });

  afterAll(async () => {
    // Teardown: Stop services, clean up
  });

  beforeEach(() => {
    // Reset mocks before each test
    nock.cleanAll();
  });

  describe('{{.Method}} {{.Path}}', () => {
    it('should successfully fetch data from backend', async () => {
      // Setup mock backend response
      const mockData = { id: '123', name: 'Test Item' };
      const backendURL = process.env.{{.EnvKey}}_URL || 'http://localhost:4000';

      nock(backendURL)
        .get('{{.BackendPath}}')
        .reply(200, mockData);

      // Make request to BFF
      const response = await request(app)
        .get('{{.ExposeAs}}')
        .expect(200);

      expect(response.body).toEqual(mockData);
    });

    it('should handle backend errors gracefully', async () => {
      const backendURL = process.env.{{.EnvKey}}_URL || 'http://localhost:4000';

      nock(backendURL)
        .get('{{.BackendPath}}')
        .reply(500, { error: 'Internal Server Error' });

      // Make request to BFF
      const response = await request(app)
        .get('{{.ExposeAs}}')
        .expect(500);

      expect(response.body).toHaveProperty('error');
    });

    it('should handle backend timeouts', async () => {
      const backendURL = process.env.{{.EnvKey}}_URL || 'http://localhost:4000';

      nock(backendURL)
        .get('{{.BackendPath}}')
        .delayConnection(5000) // Simulate slow backend
        .reply(200, { data: 'slow response' });

      // Make request to BFF (should timeout before 5s)
      const response = await request(app)
        .get('{{.ExposeAs}}')
        .timeout(3000);

      // Expect timeout handling
      expect(response.status).toBeGreaterThanOrEqual(500);
    });

    {{if .RequiresAuth}}
    it('should require authentication', async () => {
      // Make request without auth token
      const response = await request(app)
        .get('{{.ExposeAs}}')
        .expect(401);

      expect(response.body).toHaveProperty('error');
      expect(response.body.error).toMatch(/authentication|unauthorized/i);
    });

    it('should accept valid JWT token', async () => {
      const token = global.testHelpers.createMockToken();
      const mockData = { id: '123', name: 'Test Item' };
      const backendURL = process.env.{{.EnvKey}}_URL || 'http://localhost:4000';

      nock(backendURL)
        .get('{{.BackendPath}}')
        .reply(200, mockData);

      const response = await request(app)
        .get('{{.ExposeAs}}')
        .set('Authorization', `Bearer ${token}`)
        .expect(200);

      expect(response.body).toEqual(mockData);
    });
    {{end}}

    it('should forward request headers to backend', async () => {
      const backendURL = process.env.{{.EnvKey}}_URL || 'http://localhost:4000';
      let receivedHeaders = {};

      nock(backendURL)
        .get('{{.BackendPath}}')
        .reply(function() {
          receivedHeaders = this.req.headers;
          return [200, { success: true }];
        });

      await request(app)
        .get('{{.ExposeAs}}')
        .set('X-Custom-Header', 'test-value')
        .expect(200);

      expect(receivedHeaders['x-custom-header']).toBeDefined();
    });
  });

  // Add more test cases here
  // - Test pagination
  // - Test query parameters
  // - Test request body transformation
  // - Test response transformation
  // - Test caching behavior
  // - Test circuit breaker behavior
});

/**
 * Example: Testing with real backend services
 * 
 * To run integration tests against real services:
 * 1. Start backend services (docker-compose up)
 * 2. Set environment variables:
 *    export TEST_TYPE=integration
 *    export {{.EnvKey}}_URL=http://localhost:4000/api
 * 3. Run tests:
 *    npm run test:integration
 */

