/**
 * Test Fixtures
 * Auto-generated by bffgen
 * 
 * Common test data for unit and integration tests
 */

module.exports = {
  // User fixtures
  users: {
    validUser: {
      id: 'user-123',
      email: 'test@example.com',
      name: 'Test User',
      role: 'user',
      createdAt: '2024-01-01T00:00:00Z',
    },

    adminUser: {
      id: 'admin-123',
      email: 'admin@example.com',
      name: 'Admin User',
      role: 'admin',
      createdAt: '2024-01-01T00:00:00Z',
    },

    userList: [
      {
        id: 'user-1',
        email: 'user1@example.com',
        name: 'User One',
      },
      {
        id: 'user-2',
        email: 'user2@example.com',
        name: 'User Two',
      },
    ],
  },

  // Auth fixtures
  auth: {
    validCredentials: {
      email: 'test@example.com',
      password: 'password123',
    },

    invalidCredentials: {
      email: 'test@example.com',
      password: 'wrongpassword',
    },

    validToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ1c2VyLTEyMyIsImVtYWlsIjoidGVzdEBleGFtcGxlLmNvbSIsImlhdCI6MTYwOTQ1OTIwMCwiZXhwIjoxNjA5NTQ1NjAwfQ.test',
  },

  // Product fixtures
  products: {
    validProduct: {
      id: 'prod-123',
      name: 'Test Product',
      price: 99.99,
      description: 'A test product',
      inStock: true,
      quantity: 10,
    },

    productList: [
      {
        id: 'prod-1',
        name: 'Product One',
        price: 49.99,
      },
      {
        id: 'prod-2',
        name: 'Product Two',
        price: 79.99,
      },
    ],
  },

  // Order fixtures
  orders: {
    validOrder: {
      id: 'order-123',
      userId: 'user-123',
      items: [
        { productId: 'prod-1', quantity: 2, price: 49.99 },
        { productId: 'prod-2', quantity: 1, price: 79.99 },
      ],
      total: 179.97,
      status: 'pending',
      createdAt: '2024-01-01T00:00:00Z',
    },

    orderList: [
      {
        id: 'order-1',
        total: 99.99,
        status: 'completed',
      },
      {
        id: 'order-2',
        total: 149.99,
        status: 'pending',
      },
    ],
  },

  // HTTP Response fixtures
  responses: {
    success: (data) => ({
      status: 200,
      ok: true,
      json: async () => data,
      text: async () => JSON.stringify(data),
    }),

    error: (status = 500, message = 'Internal Server Error') => ({
      status,
      ok: false,
      json: async () => ({ error: message }),
      text: async () => JSON.stringify({ error: message }),
    }),

    notFound: () => ({
      status: 404,
      ok: false,
      json: async () => ({ error: 'Not Found' }),
      text: async () => JSON.stringify({ error: 'Not Found' }),
    }),

    unauthorized: () => ({
      status: 401,
      ok: false,
      json: async () => ({ error: 'Unauthorized' }),
      text: async () => JSON.stringify({ error: 'Unauthorized' }),
    }),
  },

  // Backend service URLs (for integration tests)
  backendURLs: {
    users: process.env.USERS_URL || 'http://localhost:4000/api',
    products: process.env.PRODUCTS_URL || 'http://localhost:5000/api',
    orders: process.env.ORDERS_URL || 'http://localhost:6000/api',
    auth: process.env.AUTH_URL || 'http://localhost:7000/api',
  },
};

// Global teardown
afterAll(async () => {
  // Close any open connections, clear caches, etc.
  await new Promise(resolve => setTimeout(resolve, 100));
});
