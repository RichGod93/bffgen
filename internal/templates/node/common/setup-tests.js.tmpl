/**
 * Jest Test Setup
 * Auto-generated by bffgen
 * 
 * Global test configuration and setup
 */

// Set test environment variables
process.env.NODE_ENV = 'test';
process.env.PORT = '3000';
process.env.JWT_SECRET = 'test-secret-key';
process.env.LOG_LEVEL = 'error'; // Reduce log noise in tests

// Extend Jest matchers if needed
// expect.extend({
//   toBeValidDate(received) {
//     const pass = !isNaN(Date.parse(received));
//     return {
//       message: () => `expected ${received} to be a valid date`,
//       pass,
//     };
//   },
// });

// Global test utilities
global.testHelpers = {
  /**
   * Create mock request object
   */
  mockRequest: (options = {}) => ({
    params: options.params || {},
    query: options.query || {},
    body: options.body || {},
    headers: options.headers || {},
    user: options.user || null,
    userId: options.userId || null,
    id: options.id || 'test-request-id',
    ...options
  }),

  /**
   * Create mock response object
   */
  mockResponse: () => {
    const res = {};
    res.status = jest.fn().mockReturnValue(res);
    res.json = jest.fn().mockReturnValue(res);
    res.send = jest.fn().mockReturnValue(res);
    res.setHeader = jest.fn().mockReturnValue(res);
    res.header = jest.fn().mockReturnValue(res);
    res.clearCookie = jest.fn().mockReturnValue(res);
    return res;
  },

  /**
   * Create mock next function
   */
  mockNext: () => jest.fn(),

  /**
   * Wait for async operations
   */
  wait: (ms = 100) => new Promise(resolve => setTimeout(resolve, ms)),

  /**
   * Create mock service response
   */
  mockServiceResponse: (data, status = 200) => ({
    data,
    status,
    ok: status >= 200 && status < 300
  }),

  /**
   * Load test fixtures
   */
  loadFixture: (name) => {
    try {
      return require(`./fixtures/${name}`);
    } catch (error) {
      console.warn(`Fixture '${name}' not found, returning empty object`);
      return {};
    }
  },

  /**
   * Create mock JWT token
   */
  createMockToken: (payload = {}) => {
    const jwt = require('jsonwebtoken');
    return jwt.sign(
      { userId: 'test-user', email: 'test@example.com', ...payload },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );
  },

  /**
   * Create authenticated request
   */
  authenticatedRequest: (options = {}) => {
    const token = global.testHelpers.createMockToken(options.user);
    return global.testHelpers.mockRequest({
      ...options,
      headers: {
        authorization: `Bearer ${token}`,
        ...options.headers
      }
    });
  },
};

// Setup for integration tests (optional)
if (process.env.TEST_TYPE === 'integration') {
  // Configure longer timeouts for integration tests
  jest.setTimeout(30000);

  // Setup test database/services before all tests
  beforeAll(async () => {
    // Example: Connect to test database
    // await setupTestDatabase();
  });

  // Teardown after all tests
  afterAll(async () => {
    // Example: Disconnect from test database
    // await teardownTestDatabase();
  });
}

// Global teardown
afterAll(async () => {
  // Close any open connections, clear caches, etc.
  await new Promise(resolve => setTimeout(resolve, 100));
});

