/**
 * {{.ServiceName}} Controller (Aggregator)
 * Auto-generated by bffgen
 * 
 * Aggregator controller with data transformation and multi-service support
 */

const {{.ServiceName}}Service = require('../services/{{.ServiceName}}.service');

class {{.ServiceNamePascal}}Controller {
  constructor() {
    this.service = new {{.ServiceName}}Service();
    this.cache = new Map(); // Simple in-memory cache (replace with Redis in production)
  }

{{range .Endpoints}}
  /**
   * {{.Method}} {{.Path}}
   * {{if .RequiresAuth}}@requires Authentication{{else}}@public{{end}}
   * 
   * TODO: Add custom business logic, data transformation, or aggregation
   */
  async {{.HandlerName}}(request, reply) {
    try {
      request.log.info(`Processing {{.Method}} {{.Path}}`, {
        params: request.params,
        userId: request.user?.userId
      });

      // TODO: Add caching logic if needed
      // const cacheKey = `{{.HandlerName}}_${JSON.stringify(request.params)}`;
      // if (this.cache.has(cacheKey)) {
      //   return this.cache.get(cacheKey);
      // }

      // Fetch data from backend service
      const result = await this.service.{{.HandlerName}}(
        request.params, 
        request.query, 
        request.body, 
        request.headers
      );

      // TODO: Transform or aggregate data here
      // const transformedData = this.transform{{.HandlerNamePascal}}(result);

      // TODO: Combine with other services if needed
      // const additionalData = await this.fetchRelatedData(result);
      // const aggregatedData = { ...result, ...additionalData };

      // TODO: Cache the result if needed
      // this.cache.set(cacheKey, result);

      request.log.debug(`Successfully processed {{.Method}} {{.Path}}`);
      return result;
    } catch (error) {
      request.log.error(`Error in {{.HandlerName}}:`, error);
      throw error;
    }
  }
{{end}}

  /**
   * Helper method for data transformation
   * TODO: Implement custom transformation logic
   */
  transformData(data) {
    // Example: Add computed fields, rename properties, filter sensitive data
    return data;
  }

  /**
   * Helper method for fetching related data from other services
   * TODO: Implement aggregation logic across multiple services
   */
  async fetchRelatedData(primaryData) {
    // Example: Fetch related data from other microservices
    return {};
  }

  /**
   * Clear cache (useful for testing or manual cache invalidation)
   */
  clearCache() {
    this.cache.clear();
  }
}

module.exports = new {{.ServiceNamePascal}}Controller();

