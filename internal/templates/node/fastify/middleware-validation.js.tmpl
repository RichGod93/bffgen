/**
 * Validation Plugin for Fastify
 * Auto-generated by bffgen
 * 
 * Request validation using Fastify's built-in JSON Schema validation
 */

const fp = require('fastify-plugin');

/**
 * Common validation schemas
 */
const commonSchemas = {
  // ID parameter schema
  idParam: {
    type: 'object',
    properties: {
      id: { type: 'string', minLength: 1 }
    },
    required: ['id']
  },
  
  // Pagination query schema
  paginationQuery: {
    type: 'object',
    properties: {
      page: { type: 'integer', minimum: 1, default: 1 },
      limit: { type: 'integer', minimum: 1, maximum: 100, default: 10 }
    }
  },
  
  // Email schema
  email: {
    type: 'string',
    format: 'email'
  },
  
  // Error response schema
  errorResponse: {
    type: 'object',
    properties: {
      error: { type: 'string' },
      message: { type: 'string' },
      statusCode: { type: 'integer' },
      details: { type: 'object' }
    }
  }
};

/**
 * Validation plugin
 */
async function validationPlugin(fastify, options) {
  // Add common schemas to Fastify
  Object.keys(commonSchemas).forEach(schemaId => {
    fastify.addSchema({
      $id: schemaId,
      ...commonSchemas[schemaId]
    });
  });

  // Custom error handler for validation errors
  fastify.setErrorHandler((error, request, reply) => {
    if (error.validation) {
      request.log.warn('Validation failed', {
        path: request.url,
        method: request.method,
        errors: error.validation
      });
      
      return reply.status(400).send({
        error: 'Validation Error',
        message: 'Request validation failed',
        statusCode: 400,
        details: error.validation
      });
    }
    
    // Pass non-validation errors to default handler
    throw error;
  });

  // Helper function to create route schemas
  fastify.decorate('createSchema', function(schema) {
    return {
      schema: {
        tags: schema.tags || ['default'],
        summary: schema.summary || '',
        description: schema.description || '',
        params: schema.params || undefined,
        querystring: schema.query || undefined,
        body: schema.body || undefined,
        response: schema.response || {
          200: {
            description: 'Successful response',
            type: 'object'
          },
          400: { $ref: 'errorResponse#' },
          401: { $ref: 'errorResponse#' },
          500: { $ref: 'errorResponse#' }
        }
      }
    };
  });
}

module.exports = fp(validationPlugin, {
  name: 'validation-plugin'
});

