/**
 * {{.ServiceName}} Service Routes
 * Auto-generated from bffgen.config.json
 */

/**
 * Register {{.ServiceName}} routes
 * @param {Object} fastify - Fastify instance
 * @param {Object} options - Route options
 */
async function {{.ServiceName}}Routes(fastify, options) {
  {{range .Endpoints}}
  /**
   * {{.Method}} {{.Path}}
   * {{if .RequiresAuth}}Requires authentication{{else}}Public endpoint{{end}}
   */
  fastify.{{.FastifyMethod}}('{{.Path}}', {
    {{if .RequiresAuth}}onRequest: [fastify.authenticate],{{end}}
    schema: {
      description: '{{.Method}} {{.Path}}',
      tags: ['{{$.ServiceName}}']
    }
  }, async (request, reply) => {
    try {
      // Proxy request to backend: {{$.BaseURL}}{{.BackendPath}}
      const baseURL = process.env.{{$.EnvKey}}_URL || '{{$.BaseURL}}';
      const response = await fetch(`${baseURL}{{.BackendPath}}`, {
        method: '{{.Method}}',
        headers: {
          'Content-Type': 'application/json',
          ...(request.headers.authorization && { 'Authorization': request.headers.authorization })
        },
        ...(request.body && { body: JSON.stringify(request.body) })
      });
      
      if (!response.ok) {
        reply.status(response.status);
        return {
          error: 'Backend service error',
          message: `{{$.ServiceName}} service returned status ${response.status}`
        };
      }
      
      const data = await response.json();
      return data;
    } catch (error) {
      fastify.log.error('{{$.ServiceName}} service error:', error);
      reply.status(500);
      return {
        error: 'Internal Server Error',
        message: 'Failed to fetch data from {{$.ServiceName}} service'
      };
    }
  });
  {{end}}
}

module.exports = {{.ServiceName}}Routes;

