/**
 * Service Tests Template
 * Auto-generated by bffgen
 * 
 * Example service layer tests
 * Copy and modify for your specific services
 */

const nock = require('nock');

describe('Example Service Tests', () => {
  const baseURL = 'http://localhost:5000';
  let service;

  beforeEach(() => {
    // Service would be imported here
    // service = require('../src/services/example.service');
  });

  afterEach(() => {
    nock.cleanAll();
  });

  describe('HTTP GET requests', () => {
    it('should successfully fetch data from backend', async () => {
      const mockData = [{ id: '1', name: 'Item 1' }];

      nock(baseURL)
        .get('/api/items')
        .reply(200, mockData);

      // const result = await service.getAll();

      // expect(result).toEqual(mockData);
    });

    it('should handle 404 errors', async () => {
      nock(baseURL)
        .get('/api/items/999')
        .reply(404, { error: 'Not found' });

      // await expect(service.getById('999')).rejects.toThrow();
    });

    it('should handle 500 errors with retry', async () => {
      nock(baseURL)
        .get('/api/items')
        .reply(500, { error: 'Internal server error' })
        .get('/api/items')
        .reply(500, { error: 'Internal server error' })
        .get('/api/items')
        .reply(200, []);

      // Should retry and eventually succeed
      // const result = await service.getAll();
      // expect(result).toEqual([]);
    });

    it('should handle timeout errors', async () => {
      nock(baseURL)
        .get('/api/items')
        .delayConnection(35000) // Longer than timeout
        .reply(200, []);

      // await expect(service.getAll()).rejects.toThrow(/timeout/i);
    });
  });

  describe('HTTP POST requests', () => {
    it('should successfully create item', async () => {
      const newItem = { name: 'New Item' };
      const createdItem = { id: '2', ...newItem };

      nock(baseURL)
        .post('/api/items', newItem)
        .reply(201, createdItem);

      // const result = await service.create(newItem);

      // expect(result).toEqual(createdItem);
    });

    it('should handle validation errors', async () => {
      nock(baseURL)
        .post('/api/items', {})
        .reply(400, { error: 'Validation failed' });

      // await expect(service.create({})).rejects.toThrow();
    });
  });

  describe('HTTP PUT requests', () => {
    it('should successfully update item', async () => {
      const updateData = { name: 'Updated Item' };
      const updatedItem = { id: '1', ...updateData };

      nock(baseURL)
        .put('/api/items/1', updateData)
        .reply(200, updatedItem);

      // const result = await service.update('1', updateData);

      // expect(result).toEqual(updatedItem);
    });
  });

  describe('HTTP DELETE requests', () => {
    it('should successfully delete item', async () => {
      nock(baseURL)
        .delete('/api/items/1')
        .reply(204);

      // await service.delete('1');
      // Should not throw
    });
  });

  describe('Authorization headers', () => {
    it('should forward authorization header', async () => {
      const token = 'Bearer test-token';

      nock(baseURL)
        .get('/api/items')
        .matchHeader('Authorization', token)
        .reply(200, []);

      // const headers = { authorization: token };
      // await service.getAll({}, {}, null, headers);
    });
  });
});

