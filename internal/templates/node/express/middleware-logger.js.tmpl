/**
 * Request Logging Middleware
 * Auto-generated by bffgen
 * 
 * Logs HTTP requests and responses with timing information
 */

const logger = require('../utils/logger');
const morgan = require('morgan');

/**
 * Custom token for response time
 */
morgan.token('response-time-ms', (req, res) => {
  if (!req._startTime) return '0';
  const diff = process.hrtime(req._startTime);
  const ms = diff[0] * 1e3 + diff[1] * 1e-6;
  return ms.toFixed(2);
});

/**
 * Custom token for request ID
 */
morgan.token('request-id', (req) => req.id || 'N/A');

/**
 * Custom token for user ID
 */
morgan.token('user-id', (req) => req.userId || 'anonymous');

/**
 * Morgan stream to winston logger
 */
const stream = {
  write: (message) => {
    logger.http(message.trim());
  }
};

/**
 * Development logging format
 */
const developmentFormat = ':method :url :status :response-time-ms ms - :res[content-length]';

/**
 * Production logging format
 */
const productionFormat = ':request-id :user-id :method :url :status :response-time-ms ms';

/**
 * Create morgan middleware based on environment
 */
const requestLogger = morgan(
  process.env.NODE_ENV === 'production' ? productionFormat : developmentFormat,
  { stream }
);

/**
 * Request timing middleware
 * Adds start time to track request duration
 */
function requestTiming(req, res, next) {
  req._startTime = process.hrtime();
  next();
}

/**
 * Request details logger
 * Logs additional request details for debugging
 */
function requestDetails(req, res, next) {
  if (process.env.NODE_ENV === 'development') {
    logger.debug('Incoming request', {
      id: req.id,
      method: req.method,
      url: req.url,
      headers: req.headers,
      query: req.query,
      params: req.params,
      ip: req.ip,
      userId: req.userId
    });
  }
  next();
}

/**
 * Response logger
 * Logs response details after request completion
 */
function responseLogger(req, res, next) {
  const originalSend = res.send;
  
  res.send = function(data) {
    res.send = originalSend;
    
    logger.info('Request completed', {
      id: req.id,
      method: req.method,
      url: req.url,
      status: res.statusCode,
      userId: req.userId,
      responseTime: req._startTime ? 
        `${(process.hrtime(req._startTime)[0] * 1e3 + process.hrtime(req._startTime)[1] * 1e-6).toFixed(2)}ms` : 
        'N/A'
    });
    
    return res.send(data);
  };
  
  next();
}

module.exports = {
  requestLogger,
  requestTiming,
  requestDetails,
  responseLogger
};

