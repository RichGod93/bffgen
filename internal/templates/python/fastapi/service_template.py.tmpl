"""
{{.ServiceName}} Service
Generated by bffgen
"""

{{if .Async}}
import httpx
{{else}}
import requests
{{end}}
from typing import Dict, Any, Optional
import logging

from config import settings

logger = logging.getLogger(__name__)


class {{.ServiceNameCamel}}Service:
    """Service for handling {{.ServiceName}} operations"""
    
    def __init__(self):
        self.base_url = settings.__dict__.get("{{.ServiceNameUpper}}_URL", "{{.BaseURL}}")
        {{if .Async}}
        self.client = httpx.AsyncClient(timeout=30.0)
        {{else}}
        self.session = requests.Session()
        self.session.headers.update({"Content-Type": "application/json"})
        {{end}}
    
    {{range .Endpoints}}
    {{if $.Async}}async {{end}}def {{.FunctionName}}(self{{if .HasBody}}, data: Dict[str, Any]{{end}}) -> Dict[str, Any]:
        """{{.Description}}"""
        try:
            url = f"{self.base_url}{{.UpstreamPath}}"
            {{if $.Async}}
            response = await self.client.{{.Method}}(url{{if .HasBody}}, json=data{{end}})
            response.raise_for_status()
            return response.json()
            {{else}}
            response = self.session.{{.Method}}(url{{if .HasBody}}, json=data{{end}})
            response.raise_for_status()
            return response.json()
            {{end}}
        except Exception as e:
            logger.error(f"Error calling {{.FunctionName}}: {str(e)}")
            raise
    {{end}}
    
    {{if .Async}}
    async def close(self):
        """Close the HTTP client"""
        await self.client.aclose()
    {{else}}
    def close(self):
        """Close the HTTP session"""
        self.session.close()
    {{end}}

