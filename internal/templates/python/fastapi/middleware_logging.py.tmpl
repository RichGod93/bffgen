"""
Logging Middleware
Generated by bffgen
"""

from fastapi import Request, Response
from starlette.middleware.base import BaseHTTPMiddleware
import time
import logging
import uuid

logger = logging.getLogger(__name__)


class LoggingMiddleware(BaseHTTPMiddleware):
    """Middleware for request/response logging"""
    
    async def dispatch(self, request: Request, call_next):
        """
        Log incoming requests and outgoing responses
        
        Args:
            request: FastAPI request
            call_next: Next middleware/route handler
        
        Returns:
            Response from next handler
        """
        # Generate request ID
        request_id = str(uuid.uuid4())
        request.state.request_id = request_id
        
        # Log request
        logger.info(
            f"request_id={request_id} method={request.method} "
            f"path={request.url.path} client={request.client.host}"
        )
        
        # Process request
        start_time = time.time()
        
        try:
            response = await call_next(request)
            
            # Calculate duration
            duration_ms = (time.time() - start_time) * 1000
            
            # Log response
            logger.info(
                f"request_id={request_id} status={response.status_code} "
                f"duration_ms={duration_ms:.2f}"
            )
            
            # Add request ID to response headers
            response.headers["X-Request-ID"] = request_id
            
            return response
        
        except Exception as e:
            # Log error
            duration_ms = (time.time() - start_time) * 1000
            logger.error(
                f"request_id={request_id} error={type(e).__name__} "
                f"message={str(e)} duration_ms={duration_ms:.2f}"
            )
            raise

