"""
FastAPI BFF Server
Generated by bffgen for {{.ProjectName}}
"""

from fastapi import FastAPI, Request, Response
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded
import uvicorn
import time
from typing import Callable

from config import settings
from utils.logger import setup_logger{{if .Async}}
import asyncio{{end}}

logger = setup_logger(__name__, settings.LOG_LEVEL)

# Rate limiter
limiter = Limiter(key_func=get_remote_address)

# Initialize FastAPI app
app = FastAPI(
    title="{{.ProjectName}}",
    description="Backend-for-Frontend service generated by bffgen",
    version="1.0.0",
    docs_url="/docs" if settings.ENVIRONMENT == "development" else None,
    redoc_url="/redoc" if settings.ENVIRONMENT == "development" else None,
)

# Add rate limiter to app state
app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)


# Request logging middleware
@app.middleware("http")
{{if .Async}}async {{end}}def log_requests(request: Request, call_next: Callable) -> Response:
    """Log all incoming requests"""
    start_time = time.time()
    
    {{if .Async}}
    response = await call_next(request)
    {{else}}
    response = call_next(request)
    {{end}}
    
    duration_ms = (time.time() - start_time) * 1000
    
    logger.info(
        f"method={request.method} path={request.url.path} "
        f"status={response.status_code} duration_ms={duration_ms:.2f}"
    )
    
    return response


# CORS Configuration
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
    allow_headers=["*"],
    expose_headers=["X-Request-ID"],
)


# Health check endpoint
@app.get("/health")
{{if .Async}}async {{end}}def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "service": "{{.ProjectName}}",
        "environment": settings.ENVIRONMENT,
    }


# Ready check endpoint
@app.get("/ready")
{{if .Async}}async {{end}}def ready_check():
    """Readiness check endpoint"""
    return {
        "status": "ready",
        "service": "{{.ProjectName}}",
    }


# BFFGEN_ROUTER_IMPORTS - Auto-generated router imports will be inserted here by bffgen generate
# Do not modify this marker comment

# BFFGEN_ROUTER_INCLUDES - Auto-generated router includes will be inserted here by bffgen generate
# Do not modify this marker comment


# Global exception handler
@app.exception_handler(Exception)
{{if .Async}}async {{end}}def global_exception_handler(request: Request, exc: Exception):
    """Handle all unhandled exceptions"""
    logger.error(f"Unhandled exception: {type(exc).__name__}: {str(exc)}")
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal server error",
            "detail": str(exc) if settings.ENVIRONMENT == "development" else "An error occurred"
        }
    )


if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host=settings.HOST,
        port=settings.PORT,
        reload=settings.ENVIRONMENT == "development",
        log_level=settings.LOG_LEVEL.lower(),
    )

