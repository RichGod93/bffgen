"""
Pytest configuration and fixtures
Generated by bffgen
"""

import pytest
from fastapi.testclient import TestClient
from typing import Generator

from main import app


@pytest.fixture
def client() -> Generator:
    """
    Create test client for FastAPI app
    
    Yields:
        TestClient instance
    """
    with TestClient(app) as test_client:
        yield test_client


@pytest.fixture
def auth_headers() -> dict:
    """
    Generate authentication headers for testing
    
    Returns:
        Dict with Authorization header
    """
    # TODO: Generate valid JWT token for testing
    return {
        "Authorization": "Bearer test-token"
    }


@pytest.fixture
def mock_backend_service(monkeypatch):
    """
    Mock backend service responses
    
    Args:
        monkeypatch: Pytest monkeypatch fixture
    """
    class MockResponse:
        def __init__(self, json_data, status_code=200):
            self.json_data = json_data
            self.status_code = status_code
        
        def json(self):
            return self.json_data
        
        def raise_for_status(self):
            if self.status_code >= 400:
                raise Exception(f"HTTP {self.status_code}")
    
    def mock_get(*args, **kwargs):
        return MockResponse({"message": "mocked response"})
    
    def mock_post(*args, **kwargs):
        return MockResponse({"message": "mocked response"})
    
    # Patch httpx or requests depending on async mode
    try:
        import httpx
        monkeypatch.setattr("httpx.AsyncClient.get", mock_get)
        monkeypatch.setattr("httpx.AsyncClient.post", mock_post)
    except ImportError:
        import requests
        monkeypatch.setattr("requests.Session.get", mock_get)
        monkeypatch.setattr("requests.Session.post", mock_post)

