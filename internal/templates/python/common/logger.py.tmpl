"""
Logging utility for BFF service
Generated by bffgen
"""

import logging
import sys
from datetime import datetime
from typing import Optional

def setup_logger(name: str, level: str = "INFO") -> logging.Logger:
    """
    Setup and configure logger with structured output
    
    Args:
        name: Logger name (usually __name__)
        level: Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
    
    Returns:
        Configured logger instance
    """
    logger = logging.getLogger(name)
    logger.setLevel(getattr(logging, level.upper()))
    
    # Avoid adding duplicate handlers
    if logger.handlers:
        return logger
    
    # Console handler with structured format
    handler = logging.StreamHandler(sys.stdout)
    handler.setLevel(getattr(logging, level.upper()))
    
    # Structured format for production
    formatter = logging.Formatter(
        '{"timestamp": "%(asctime)s", "level": "%(levelname)s", '
        '"logger": "%(name)s", "message": "%(message)s"}',
        datefmt="%Y-%m-%dT%H:%M:%S"
    )
    
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    
    return logger


class RequestLogger:
    """Middleware helper for request logging"""
    
    def __init__(self, logger: logging.Logger):
        self.logger = logger
    
    def log_request(
        self,
        method: str,
        path: str,
        status_code: int,
        duration_ms: float,
        user_id: Optional[str] = None
    ) -> None:
        """Log HTTP request details"""
        self.logger.info(
            f"method={method} path={path} status={status_code} "
            f"duration_ms={duration_ms:.2f} user_id={user_id or 'anonymous'}"
        )
    
    def log_error(
        self,
        method: str,
        path: str,
        error: Exception,
        status_code: int = 500
    ) -> None:
        """Log HTTP error details"""
        self.logger.error(
            f"method={method} path={path} status={status_code} "
            f"error={type(error).__name__}: {str(error)}"
        )

