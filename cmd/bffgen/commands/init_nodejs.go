// File: init_nodejs.go
// Purpose: Node.js-specific project initialization
// Contains all logic for scaffolding Express and Fastify BFF projects

package commands

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/RichGod93/bffgen/internal/scaffolding"
	"github.com/RichGod93/bffgen/internal/templates"
	"github.com/RichGod93/bffgen/internal/utils"
)

// createPackageJsonFile creates package.json file for Node.js projects
func createPackageJsonFile(projectName string, langType scaffolding.LanguageType, framework string) error {
	content := generatePackageJsonContent(projectName, langType, framework)
	return os.WriteFile(filepath.Join(projectName, "package.json"), []byte(content), utils.ProjectFilePerm)
}

// generatePackageJsonContent creates content for package.json file
func generatePackageJsonContent(projectName string, langType scaffolding.LanguageType, framework string) string {
	var dependencies string
	switch framework {
	case "express":
		dependencies = `{
  "name": "` + projectName + `",
  "version": "1.0.0",
  "description": "Backend-for-Frontend service generated by bffgen",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js",
    "test": "jest"
  },
  "keywords": ["bff", "backend-for-frontend", "api"],
  "author": "",
  "license": "MIT",
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "helmet": "^7.1.0",
    "express-rate-limit": "^7.1.5",
    "jsonwebtoken": "^9.0.2",
    "cookie-parser": "^1.4.6",
    "express-validator": "^7.0.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.1",
    "jest": "^29.7.0"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}`
	case "fastify":
		dependencies = `{
  "name": "` + projectName + `",
  "version": "1.0.0",
  "description": "Backend-for-Frontend service generated by bffgen",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js",
    "test": "jest"
  },
  "keywords": ["bff", "backend-for-frontend", "api"],
  "author": "",
  "license": "MIT",
  "dependencies": {
    "@fastify/cors": "^8.5.0",
    "@fastify/helmet": "^11.1.1",
    "@fastify/rate-limit": "^9.1.0",
    "fastify": "^4.28.1",
    "@fastify/jwt": "^7.2.4",
    "@fastify/cookie": "^9.3.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.1",
    "jest": "^29.7.0"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}`
	default:
		dependencies = ""
	}
	return dependencies
}

// createNodeExpressMainFileWithOptions creates Express index.js from template with options
func createNodeExpressMainFileWithOptions(projectName string, backendServs []BackendService, opts ProjectOptions) error {
	loader := templates.NewTemplateLoader(scaffolding.LanguageNodeExpress)

	// Convert backend services to template format
	var services []templates.BackendServiceData
	for _, svc := range backendServs {
		services = append(services, templates.BackendServiceData{
			Name:    svc.Name,
			BaseURL: svc.BaseURL,
			Port:    svc.Port,
		})
	}

	// Prepare template data
	data := &templates.TemplateData{
		ProjectName:        projectName,
		Runtime:            "nodejs-express",
		Framework:          "express",
		CORSOrigins:        templates.FormatCORSOriginsForJSON([]string{"localhost:3000", "localhost:3001"}),
		CORSOriginsJS:      templates.FormatCORSOriginsForJS([]string{"localhost:3000", "localhost:3001"}),
		CORSOriginsEnv:     templates.FormatCORSOriginsForEnv([]string{"localhost:3000", "localhost:3001"}),
		BackendRoutes:      templates.GenerateExpressRoutes(services),
		BackendServicesEnv: templates.GenerateBackendServicesEnv(services),
		BackendsJSON:       templates.GenerateBackendsJSON(services),
		BackendServices:    services,
	}

	// Render templates
	indexContent, err := loader.RenderTemplate("express", "index.js.tmpl", data)
	if err != nil {
		return err
	}

	packageContent, err := loader.RenderTemplate("express", "package.json.tmpl", data)
	if err != nil {
		return err
	}

	envContent, err := loader.RenderTemplate("express", "env.tmpl", data)
	if err != nil {
		return err
	}

	gitignoreContent, err := loader.RenderTemplate("express", "gitignore.tmpl", data)
	if err != nil {
		return err
	}

	bffgenConfigContent, err := loader.RenderTemplate("express", "bffgen.config.json.tmpl", data)
	if err != nil {
		return err
	}

	// Write files to src/
	if err := os.WriteFile(filepath.Join(projectName, "src", "index.js"), []byte(indexContent), utils.ProjectFilePerm); err != nil {
		return err
	}

	if err := os.WriteFile(filepath.Join(projectName, "package.json"), []byte(packageContent), utils.ProjectFilePerm); err != nil {
		return err
	}

	if err := os.WriteFile(filepath.Join(projectName, ".env.example"), []byte(envContent), utils.ProjectFilePerm); err != nil {
		return err
	}

	if err := os.WriteFile(filepath.Join(projectName, ".gitignore"), []byte(gitignoreContent), utils.ProjectFilePerm); err != nil {
		return err
	}

	if err := os.WriteFile(filepath.Join(projectName, "bffgen.config.json"), []byte(bffgenConfigContent), utils.ProjectFilePerm); err != nil {
		return err
	}

	// Generate middleware files
	if err := createExpressMiddleware(projectName, loader); err != nil {
		return err
	}

	// Generate logger utility
	if err := createLoggerUtility(projectName, scaffolding.LanguageNodeExpress, "express"); err != nil {
		return fmt.Errorf("failed to create logger utility: %w", err)
	}

	// Generate aggregation utilities
	if err := createAggregationUtilities(projectName, scaffolding.LanguageNodeExpress, "express"); err != nil {
		return fmt.Errorf("failed to create aggregation utilities: %w", err)
	}

	// Generate example controllers (optional)
	if err := createExampleControllers(projectName, scaffolding.LanguageNodeExpress, "express"); err != nil {
		// Non-fatal, just log warning
		fmt.Printf("Warning: failed to create example controllers: %v\n", err)
	}

	// Generate optional Redis setup files
	if err := createRedisSetupFiles(projectName, scaffolding.LanguageNodeExpress, "express"); err != nil {
		// Non-fatal, just log warning
		fmt.Printf("Warning: failed to create Redis setup files: %v\n", err)
	}

	// Generate HTTP client and service files
	if err := createServiceFiles(projectName, scaffolding.LanguageNodeExpress, "express"); err != nil {
		return fmt.Errorf("failed to create service files: %w", err)
	}

	// Conditionally generate test files
	if !opts.SkipTests {
		if err := createTestFiles(projectName, scaffolding.LanguageNodeExpress, "express"); err != nil {
			return fmt.Errorf("failed to create test files: %w", err)
		}
	}

	// Conditionally generate Swagger files
	if !opts.SkipDocs {
		if err := createSwaggerFiles(projectName, scaffolding.LanguageNodeExpress, "express", projectName); err != nil {
			return fmt.Errorf("failed to create swagger files: %w", err)
		}
	}

	return nil
}

// createNodeFastifyMainFileWithOptions creates Fastify index.js from template with options
func createNodeFastifyMainFileWithOptions(projectName string, backendServs []BackendService, opts ProjectOptions) error {
	loader := templates.NewTemplateLoader(scaffolding.LanguageNodeFastify)

	// Convert backend services to template format
	var services []templates.BackendServiceData
	for _, svc := range backendServs {
		services = append(services, templates.BackendServiceData{
			Name:    svc.Name,
			BaseURL: svc.BaseURL,
			Port:    svc.Port,
		})
	}

	// Prepare template data
	data := &templates.TemplateData{
		ProjectName:        projectName,
		Runtime:            "nodejs-fastify",
		Framework:          "fastify",
		CORSOrigins:        templates.FormatCORSOriginsForJSON([]string{"localhost:3000", "localhost:3001"}),
		CORSOriginsJS:      templates.FormatCORSOriginsForJS([]string{"localhost:3000", "localhost:3001"}),
		CORSOriginsEnv:     templates.FormatCORSOriginsForEnv([]string{"localhost:3000", "localhost:3001"}),
		BackendRoutes:      templates.GenerateFastifyRoutes(services),
		BackendServicesEnv: templates.GenerateBackendServicesEnv(services),
		BackendsJSON:       templates.GenerateBackendsJSON(services),
		BackendServices:    services,
	}

	// Render templates
	indexContent, err := loader.RenderTemplate("fastify", "index.js.tmpl", data)
	if err != nil {
		return err
	}

	packageContent, err := loader.RenderTemplate("fastify", "package.json.tmpl", data)
	if err != nil {
		return err
	}

	envContent, err := loader.RenderTemplate("fastify", "env.tmpl", data)
	if err != nil {
		return err
	}

	gitignoreContent, err := loader.RenderTemplate("fastify", "gitignore.tmpl", data)
	if err != nil {
		return err
	}

	bffgenConfigContent, err := loader.RenderTemplate("fastify", "bffgen.config.json.tmpl", data)
	if err != nil {
		return err
	}

	// Write files to src/
	if err := os.WriteFile(filepath.Join(projectName, "src", "index.js"), []byte(indexContent), utils.ProjectFilePerm); err != nil {
		return err
	}

	if err := os.WriteFile(filepath.Join(projectName, "package.json"), []byte(packageContent), utils.ProjectFilePerm); err != nil {
		return err
	}

	if err := os.WriteFile(filepath.Join(projectName, ".env.example"), []byte(envContent), utils.ProjectFilePerm); err != nil {
		return err
	}

	if err := os.WriteFile(filepath.Join(projectName, ".gitignore"), []byte(gitignoreContent), utils.ProjectFilePerm); err != nil {
		return err
	}

	if err := os.WriteFile(filepath.Join(projectName, "bffgen.config.json"), []byte(bffgenConfigContent), utils.ProjectFilePerm); err != nil {
		return err
	}

	// Generate middleware files
	if err := createFastifyMiddleware(projectName, loader); err != nil {
		return err
	}

	// Generate logger utility
	if err := createLoggerUtility(projectName, scaffolding.LanguageNodeFastify, "fastify"); err != nil {
		return fmt.Errorf("failed to create logger utility: %w", err)
	}

	// Generate aggregation utilities
	if err := createAggregationUtilities(projectName, scaffolding.LanguageNodeFastify, "fastify"); err != nil {
		return fmt.Errorf("failed to create aggregation utilities: %w", err)
	}

	// Generate example controllers (optional)
	if err := createExampleControllers(projectName, scaffolding.LanguageNodeFastify, "fastify"); err != nil {
		// Non-fatal, just log warning
		fmt.Printf("Warning: failed to create example controllers: %v\n", err)
	}

	// Generate optional Redis setup files
	if err := createRedisSetupFiles(projectName, scaffolding.LanguageNodeFastify, "fastify"); err != nil {
		// Non-fatal, just log warning
		fmt.Printf("Warning: failed to create Redis setup files: %v\n", err)
	}

	// Generate HTTP client and service files
	if err := createServiceFiles(projectName, scaffolding.LanguageNodeFastify, "fastify"); err != nil {
		return fmt.Errorf("failed to create service files: %w", err)
	}

	// Conditionally generate test files
	if !opts.SkipTests {
		if err := createTestFiles(projectName, scaffolding.LanguageNodeFastify, "fastify"); err != nil {
			return fmt.Errorf("failed to create test files: %w", err)
		}
	}

	// Conditionally generate Swagger files
	if !opts.SkipDocs {
		if err := createSwaggerFiles(projectName, scaffolding.LanguageNodeFastify, "fastify", projectName); err != nil {
			return fmt.Errorf("failed to create swagger files: %w", err)
		}
	}

	return nil
}

// createExpressMiddleware creates middleware files for Express
func createExpressMiddleware(projectName string, loader *templates.TemplateLoader) error {
	// Create middleware directory
	middlewareDir := filepath.Join(projectName, "src", "middleware")

	// Render middleware templates
	authContent, err := loader.RenderTemplate("express", "middleware-auth.js.tmpl", &templates.TemplateData{})
	if err != nil {
		return fmt.Errorf("failed to render auth middleware: %w", err)
	}

	errorContent, err := loader.RenderTemplate("express", "middleware-error.js.tmpl", &templates.TemplateData{})
	if err != nil {
		return fmt.Errorf("failed to render error middleware: %w", err)
	}

	// Write middleware files
	if err := os.WriteFile(filepath.Join(middlewareDir, "auth.js"), []byte(authContent), utils.ProjectFilePerm); err != nil {
		return err
	}

	if err := os.WriteFile(filepath.Join(middlewareDir, "errorHandler.js"), []byte(errorContent), utils.ProjectFilePerm); err != nil {
		return err
	}

	return nil
}

// createFastifyMiddleware creates middleware files for Fastify
func createFastifyMiddleware(projectName string, loader *templates.TemplateLoader) error {
	// Create middleware directory
	middlewareDir := filepath.Join(projectName, "src", "middleware")

	// Render middleware templates
	authContent, err := loader.RenderTemplate("fastify", "middleware-auth.js.tmpl", &templates.TemplateData{})
	if err != nil {
		return fmt.Errorf("failed to render auth middleware: %w", err)
	}

	errorContent, err := loader.RenderTemplate("fastify", "middleware-error.js.tmpl", &templates.TemplateData{})
	if err != nil {
		return fmt.Errorf("failed to render error middleware: %w", err)
	}

	// Write middleware files
	if err := os.WriteFile(filepath.Join(middlewareDir, "auth.js"), []byte(authContent), utils.ProjectFilePerm); err != nil {
		return err
	}

	if err := os.WriteFile(filepath.Join(middlewareDir, "errorHandler.js"), []byte(errorContent), utils.ProjectFilePerm); err != nil {
		return err
	}

	return nil
}

// createLoggerUtility creates the logger utility file
func createLoggerUtility(projectName string, langType scaffolding.LanguageType, framework string) error {
	loader := templates.NewTemplateLoader(langType)

	data := &templates.TemplateData{
		Framework: framework,
	}

	loggerContent, err := loader.RenderTemplate(framework, "logger.js.tmpl", data)
	if err != nil {
		return fmt.Errorf("failed to render logger: %w", err)
	}

	utilsDir := filepath.Join(projectName, "src", "utils")
	if err := os.MkdirAll(utilsDir, utils.ProjectDirPerm); err != nil {
		return err
	}

	return os.WriteFile(filepath.Join(utilsDir, "logger.js"), []byte(loggerContent), utils.ProjectFilePerm)
}

// createAggregationUtilities creates the aggregation utility files
func createAggregationUtilities(projectName string, langType scaffolding.LanguageType, framework string) error {
	loader := templates.NewTemplateLoader(langType)
	utilsDir := filepath.Join(projectName, "src", "utils")

	data := &templates.TemplateData{
		Framework: framework,
	}

	// List of utility files to create
	utilities := []struct {
		template string
		filename string
	}{
		{"aggregator.js.tmpl", "aggregator.js"},
		{"cache-manager.js.tmpl", "cache-manager.js"},
		{"circuit-breaker.js.tmpl", "circuit-breaker.js"},
		{"response-transformer.js.tmpl", "response-transformer.js"},
		{"request-batcher.js.tmpl", "request-batcher.js"},
		{"field-selector.js.tmpl", "field-selector.js"},
	}

	for _, util := range utilities {
		content, err := loader.RenderTemplate(framework, util.template, data)
		if err != nil {
			return fmt.Errorf("failed to render %s: %w", util.template, err)
		}

		if err := os.WriteFile(filepath.Join(utilsDir, util.filename), []byte(content), utils.ProjectFilePerm); err != nil {
			return fmt.Errorf("failed to write %s: %w", util.filename, err)
		}
	}

	return nil
}

// createExampleControllers creates example aggregation controllers
func createExampleControllers(projectName string, langType scaffolding.LanguageType, framework string) error {
	loader := templates.NewTemplateLoader(langType)
	examplesDir := filepath.Join(projectName, "src", "examples")

	if err := os.MkdirAll(examplesDir, utils.ProjectDirPerm); err != nil {
		return err
	}

	data := &templates.TemplateData{
		Framework: framework,
	}

	// List of example files to create
	examples := []struct {
		template string
		filename string
	}{
		{"examples/user-dashboard.controller.js.tmpl", "user-dashboard.controller.js"},
		{"examples/ecommerce-catalog.controller.js.tmpl", "ecommerce-catalog.controller.js"},
	}

	for _, example := range examples {
		content, err := loader.RenderTemplate(framework, example.template, data)
		if err != nil {
			// Examples are optional, log but don't fail
			fmt.Printf("Warning: failed to render %s: %v\n", example.template, err)
			continue
		}

		if err := os.WriteFile(filepath.Join(examplesDir, example.filename), []byte(content), utils.ProjectFilePerm); err != nil {
			fmt.Printf("Warning: failed to write %s: %v\n", example.filename, err)
			continue
		}
	}

	return nil
}

// createRedisSetupFiles creates optional Redis and script files
func createRedisSetupFiles(projectName string, langType scaffolding.LanguageType, framework string) error {
	loader := templates.NewTemplateLoader(langType)

	data := &templates.TemplateData{
		ProjectName: filepath.Base(projectName),
		Framework:   framework,
	}

	// Create docker-compose.yml
	dockerComposeContent, err := loader.RenderTemplate(framework, "docker-compose.yml.tmpl", data)
	if err != nil {
		return fmt.Errorf("failed to render docker-compose.yml: %w", err)
	}

	if err := os.WriteFile(filepath.Join(projectName, "docker-compose.yml"), []byte(dockerComposeContent), utils.ProjectFilePerm); err != nil {
		return fmt.Errorf("failed to write docker-compose.yml: %w", err)
	}

	// Create scripts directory and clear-cache.js
	scriptsDir := filepath.Join(projectName, "scripts")
	if err := os.MkdirAll(scriptsDir, utils.ProjectDirPerm); err != nil {
		return err
	}

	clearCacheContent, err := loader.RenderTemplate(framework, "scripts/clear-cache.js.tmpl", data)
	if err != nil {
		return fmt.Errorf("failed to render clear-cache.js: %w", err)
	}

	if err := os.WriteFile(filepath.Join(scriptsDir, "clear-cache.js"), []byte(clearCacheContent), utils.ProjectFilePerm); err != nil {
		return fmt.Errorf("failed to write clear-cache.js: %w", err)
	}

	return nil
}

// createServiceFiles creates the HTTP client and service files
func createServiceFiles(projectName string, langType scaffolding.LanguageType, framework string) error {
	loader := templates.NewTemplateLoader(langType)

	// Create httpClient.js (base HTTP client)
	httpClientContent, err := loader.RenderTemplate(framework, "service-base.js.tmpl", &templates.TemplateData{})
	if err != nil {
		return fmt.Errorf("failed to render HTTP client: %w", err)
	}

	servicesDir := filepath.Join(projectName, "src", "services")
	if err := os.MkdirAll(servicesDir, utils.ProjectDirPerm); err != nil {
		return err
	}

	return os.WriteFile(filepath.Join(servicesDir, "httpClient.js"), []byte(httpClientContent), utils.ProjectFilePerm)
}

// createTestFiles creates Jest configuration and sample test files
func createTestFiles(projectName string, langType scaffolding.LanguageType, framework string) error {
	loader := templates.NewTemplateLoader(langType)

	// Create jest.config.js
	jestConfigContent, err := loader.RenderTemplate(framework, "jest.config.js.tmpl", &templates.TemplateData{})
	if err != nil {
		return fmt.Errorf("failed to render jest config: %w", err)
	}

	if err := os.WriteFile(filepath.Join(projectName, "jest.config.js"), []byte(jestConfigContent), utils.ProjectFilePerm); err != nil {
		return err
	}

	// Create setup-tests.js
	setupTestsContent, err := loader.RenderTemplate(framework, "setup-tests.js.tmpl", &templates.TemplateData{})
	if err != nil {
		return fmt.Errorf("failed to render test setup: %w", err)
	}

	testsDir := filepath.Join(projectName, "tests")
	if err := os.WriteFile(filepath.Join(testsDir, "setup.js"), []byte(setupTestsContent), utils.ProjectFilePerm); err != nil {
		return err
	}

	// Create sample route test
	routeTestContent, err := loader.RenderTemplate(framework, "test-route.test.js.tmpl", &templates.TemplateData{})
	if err != nil {
		return fmt.Errorf("failed to render route test: %w", err)
	}

	integrationDir := filepath.Join(testsDir, "integration")
	if err := os.MkdirAll(integrationDir, utils.ProjectDirPerm); err != nil {
		return err
	}

	return os.WriteFile(filepath.Join(integrationDir, "health.test.js"), []byte(routeTestContent), utils.ProjectFilePerm)
}

// createSwaggerFiles creates Swagger configuration files
func createSwaggerFiles(projectName string, langType scaffolding.LanguageType, framework string, projectDisplayName string) error {
	loader := templates.NewTemplateLoader(langType)

	data := &templates.TemplateData{
		ProjectName: projectDisplayName,
	}

	// Create swagger-config.js
	swaggerConfigContent, err := loader.RenderTemplate(framework, "swagger-config.js.tmpl", data)
	if err != nil {
		return fmt.Errorf("failed to render swagger config: %w", err)
	}

	configDir := filepath.Join(projectName, "src", "config")
	if err := os.MkdirAll(configDir, utils.ProjectDirPerm); err != nil {
		return err
	}

	if err := os.WriteFile(filepath.Join(configDir, "swagger-config.js"), []byte(swaggerConfigContent), utils.ProjectFilePerm); err != nil {
		return err
	}

	// Create swagger-setup.js
	swaggerSetupContent, err := loader.RenderTemplate(framework, "swagger-setup.js.tmpl", data)
	if err != nil {
		return fmt.Errorf("failed to render swagger setup: %w", err)
	}

	return os.WriteFile(filepath.Join(configDir, "swagger-setup.js"), []byte(swaggerSetupContent), utils.ProjectFilePerm)
}

// createAdditionalMiddleware creates optional middleware files based on selection
func createAdditionalMiddleware(projectName string, langType scaffolding.LanguageType, framework string, middlewareTypes []string) error {
	loader := templates.NewTemplateLoader(langType)
	middlewareDir := filepath.Join(projectName, "src", "middleware")

	for _, mwType := range middlewareTypes {
		var templateName string
		var fileName string

		switch mwType {
		case "validation":
			templateName = "middleware-validation.js.tmpl"
			fileName = "validation.js"
		case "logger":
			templateName = "middleware-logger.js.tmpl"
			fileName = "logger.js"
		case "requestId":
			templateName = "middleware-requestId.js.tmpl"
			fileName = "requestId.js"
		default:
			continue
		}

		content, err := loader.RenderTemplate(framework, templateName, &templates.TemplateData{})
		if err != nil {
			return fmt.Errorf("failed to render %s middleware: %w", mwType, err)
		}

		if err := os.WriteFile(filepath.Join(middlewareDir, fileName), []byte(content), utils.ProjectFilePerm); err != nil {
			return err
		}
	}

	return nil
}
