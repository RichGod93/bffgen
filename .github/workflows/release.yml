name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v0.1.0)"
        required: true
        default: "v0.1.0"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
          echo "Releasing version: ${{ steps.version.outputs.version }}"

      - name: Verify version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: v0.1.0"
            exit 1
          fi
          echo "‚úÖ Version format is valid: $VERSION"

      - name: Build binaries
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          COMMIT_SHA=$(git rev-parse --short HEAD)

          # Build for multiple platforms
          platforms=(
            "linux/amd64"
            "linux/arm64"
            "darwin/amd64"
            "darwin/arm64"
            "windows/amd64"
          )

          mkdir -p dist

          for platform in "${platforms[@]}"; do
            IFS='/' read -r os arch <<< "$platform"
            output_name="bffgen"
            if [ "$os" = "windows" ]; then
              output_name="bffgen.exe"
            fi
            
            echo "Building for $os/$arch..."
            GOOS=$os GOARCH=$arch go build \
              -ldflags="-X main.version=$VERSION -X main.buildTime=$BUILD_TIME -X main.commit=$COMMIT_SHA" \
              -o "dist/bffgen-$os-$arch$([ "$os" = "windows" ] && echo ".exe")" \
              ./cmd/bffgen
          done

          # Create checksums
          cd dist
          sha256sum * > checksums.txt
          cd ..

          echo "‚úÖ Build completed"
          ls -la dist/

      - name: Run tests
        run: |
          go test -v ./...
          go test -race ./...

      - name: Run linter
        run: |
          go vet ./...
          go fmt ./...
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "‚ùå Code is not formatted"
            gofmt -s -l .
            exit 1
          fi
          echo "‚úÖ Code formatting is correct"

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Get previous tag (excluding the current one)
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "^$VERSION$" | head -n 1)

          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Generating release notes from $PREVIOUS_TAG to $VERSION"
            CHANGELOG=$(git log --pretty=format:"- %s" "$PREVIOUS_TAG..HEAD")
          else
            echo "Generating initial release notes"
            CHANGELOG=$(git log --pretty=format:"- %s" --reverse | head -n 20)
          fi

          # Create release notes
          cat > release_notes.md << EOF
          ## üöÄ What's New in $VERSION

          ### ‚ú® Features
          $CHANGELOG

          ### üì¶ Installation

          **Quick Install:**
          \`\`\`bash
          go install github.com/RichGod93/bffgen/cmd/bffgen@$VERSION
          \`\`\`

          **Manual Download:**
          Download the appropriate binary for your platform from the assets below.

          ### üîß Usage

          \`\`\`bash
          # Initialize a new BFF project
          bffgen init my-awesome-bff

          # Add authentication template
          bffgen add-template auth

          # Generate Go code
          bffgen generate

          # Run development server
          bffgen dev
          \`\`\`

          ### üìã Checksums

          Verify your download with the checksums file included in the release assets.

          ### üêõ Bug Reports

          Found a bug? Please report it on [GitHub Issues](https://github.com/RichGod93/bffgen/issues).

          ### ü§ù Contributing

          Want to contribute? Check out our [Contributing Guide](https://github.com/RichGod93/bffgen/blob/main/CONTRIBUTING.md).
          EOF

          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Check if release already exists
          if gh release view "$VERSION" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è  Release $VERSION already exists, deleting and recreating..."
            gh release delete "$VERSION" --yes
          fi

          # Create release using GitHub CLI
          gh release create "$VERSION" \
            --title "Release $VERSION" \
            --notes-file release_notes.md \
            --draft=false

          echo "‚úÖ Release $VERSION created"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Assets
        run: |
          # Upload each binary individually using GitHub CLI
          for file in ./dist/bffgen-*; do
            if [ -f "$file" ]; then
              echo "Uploading $file..."
              gh release upload ${{ steps.version.outputs.version }} "$file"
            fi
          done
          # Upload checksums
          gh release upload ${{ steps.version.outputs.version }} ./dist/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify Success
        run: |
          echo "üéâ Release ${{ steps.version.outputs.version }} created successfully!"
          echo "üì¶ Assets uploaded to GitHub Releases"
          echo "üîó View release: https://github.com/RichGod93/bffgen/releases/tag/${{ steps.version.outputs.version }}"

  publish-npm:
    name: Publish to npm
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org"

      - name: Get version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          # Remove 'v' prefix for npm
          NPM_VERSION="${VERSION#v}"
          echo "version=$NPM_VERSION" >> $GITHUB_OUTPUT
          echo "Publishing npm package version: $NPM_VERSION"

      - name: Update npm package version
        working-directory: npm
        run: |
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version --allow-same-version
          echo "‚úÖ npm package version updated to ${{ steps.version.outputs.version }}"

      - name: Publish to npm
        working-directory: npm
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Check if version already exists on npm
          if npm view bffgen@$VERSION version >/dev/null 2>&1; then
            echo "‚ö†Ô∏è  Version $VERSION already exists on npm"
            echo "Skipping npm publish (version already published)"
            echo "üì¶ View package: https://www.npmjs.com/package/bffgen/v/$VERSION"
            exit 0
          fi
          
          # Publish to npm
          npm publish
          echo "‚úÖ Published bffgen@$VERSION to npm"
          echo "üì¶ View package: https://www.npmjs.com/package/bffgen"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Notify npm publish success
        run: |
          echo "üéâ npm package release completed!"
          echo "üì¶ Install with: npm install -g bffgen@${{ steps.version.outputs.version }}"
          echo "üîó View on npm: https://www.npmjs.com/package/bffgen"
          echo ""
          echo "Note: If version already existed on npm, it was skipped (idempotent operation)"
