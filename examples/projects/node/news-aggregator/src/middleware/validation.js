/**
 * Validation Middleware
 * Auto-generated by bffgen
 * 
 * Request validation using express-validator
 */

const { validationResult } = require('express-validator');
const logger = require('../utils/logger');

/**
 * Validate request and handle validation errors
 */
function validateRequest(req, res, next) {
  const errors = validationResult(req);
  
  if (!errors.isEmpty()) {
    logger.warn('Validation failed', {
      path: req.path,
      method: req.method,
      errors: errors.array()
    });
    
    return res.status(400).json({
      error: 'Validation Error',
      message: 'Request validation failed',
      details: errors.array().map(err => ({
        field: err.path,
        message: err.msg,
        value: err.value
      }))
    });
  }
  
  next();
}

/**
 * Common validation rules
 */
const { body, param, query } = require('express-validator');

const validationRules = {
  // ID validation
  id: param('id')
    .isString()
    .trim()
    .notEmpty()
    .withMessage('ID is required'),
  
  // Pagination
  page: query('page')
    .optional()
    .isInt({ min: 1 })
    .withMessage('Page must be a positive integer'),
  
  limit: query('limit')
    .optional()
    .isInt({ min: 1, max: 100 })
    .withMessage('Limit must be between 1 and 100'),
  
  // Email validation
  email: body('email')
    .isEmail()
    .normalizeEmail()
    .withMessage('Valid email is required'),
  
  // String validation
  requiredString: (field) => body(field)
    .isString()
    .trim()
    .notEmpty()
    .withMessage(`${field} is required`),
  
  // Number validation
  requiredNumber: (field) => body(field)
    .isNumeric()
    .withMessage(`${field} must be a number`),
  
  // Boolean validation
  requiredBoolean: (field) => body(field)
    .isBoolean()
    .withMessage(`${field} must be a boolean`)
};

module.exports = {
  validateRequest,
  validationRules
};

