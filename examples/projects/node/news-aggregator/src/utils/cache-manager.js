/**
 * Cache Manager Utility
 * Auto-generated by bffgen
 * 
 * Provides caching with Redis support and in-memory fallback
 */

const logger = require('./logger');

class CacheManager {
  constructor(options = {}) {
    this.defaultTTL = options.ttl || 300; // 5 minutes
    this.prefix = options.prefix || 'bff:';
    this.fallbackCache = new Map(); // In-memory fallback
    this.redisClient = null;
    this.useRedis = false;

    if (process.env.REDIS_URL) {
      this.initRedis();
    } else {
      logger.warn('Redis not configured, using in-memory cache (not production-ready)');
    }
  }

  /**
   * Initialize Redis connection
   */
  async initRedis() {
    try {
      const redis = require('redis');
      this.redisClient = redis.createClient({ url: process.env.REDIS_URL });
      
      this.redisClient.on('error', (err) => {
        logger.error('Redis client error:', err);
        this.useRedis = false;
      });

      this.redisClient.on('connect', () => {
        logger.info('Redis cache connected successfully');
      });

      await this.redisClient.connect();
      this.useRedis = true;
    } catch (error) {
      logger.error('Redis connection failed, falling back to memory cache:', error.message);
      this.useRedis = false;
    }
  }

  /**
   * Get value from cache
   * @param {string} key - Cache key
   * @returns {Promise<any|null>}
   */
  async get(key) {
    const fullKey = this.prefix + key;
    
    if (this.useRedis && this.redisClient) {
      try {
        const value = await this.redisClient.get(fullKey);
        return value ? JSON.parse(value) : null;
      } catch (error) {
        logger.error('Redis get error:', error);
        return this.fallbackCache.get(fullKey);
      }
    }
    
    return this.fallbackCache.get(fullKey);
  }

  /**
   * Set value in cache
   * @param {string} key - Cache key
   * @param {any} value - Value to cache
   * @param {number} ttl - Time to live in seconds
   * @returns {Promise<void>}
   */
  async set(key, value, ttl = this.defaultTTL) {
    const fullKey = this.prefix + key;
    const serialized = JSON.stringify(value);

    if (this.useRedis && this.redisClient) {
      try {
        await this.redisClient.setEx(fullKey, ttl, serialized);
      } catch (error) {
        logger.error('Redis set error:', error);
        this.setInMemory(fullKey, value, ttl);
      }
    } else {
      this.setInMemory(fullKey, value, ttl);
    }
  }

  /**
   * Set value in memory cache with TTL
   * @param {string} fullKey - Full cache key with prefix
   * @param {any} value - Value to cache
   * @param {number} ttl - Time to live in seconds
   */
  setInMemory(fullKey, value, ttl) {
    this.fallbackCache.set(fullKey, value);
    setTimeout(() => this.fallbackCache.delete(fullKey), ttl * 1000);
  }

  /**
   * Delete value from cache
   * @param {string} key - Cache key
   * @returns {Promise<void>}
   */
  async delete(key) {
    const fullKey = this.prefix + key;
    
    if (this.useRedis && this.redisClient) {
      try {
        await this.redisClient.del(fullKey);
      } catch (error) {
        logger.error('Redis delete error:', error);
      }
    }
    
    this.fallbackCache.delete(fullKey);
  }

  /**
   * Clear all cache entries with the current prefix
   * @returns {Promise<void>}
   */
  async clear() {
    if (this.useRedis && this.redisClient) {
      try {
        const keys = await this.redisClient.keys(this.prefix + '*');
        if (keys.length > 0) {
          await this.redisClient.del(keys);
        }
      } catch (error) {
        logger.error('Redis clear error:', error);
      }
    }
    
    this.fallbackCache.clear();
  }

  /**
   * Check if cache is using Redis
   * @returns {boolean}
   */
  isUsingRedis() {
    return this.useRedis;
  }
}

module.exports = CacheManager;

