/**
 * Swagger/OpenAPI Configuration
 * Auto-generated by bffgen
 */

module.exports = {
  openapi: '3.0.0',
  info: {
    title: 'news-aggregator API',
    version: '1.0.0',
    description: 'Backend-for-Frontend API generated by bffgen',
    contact: {
      name: 'API Support',
      email: 'support@example.com'
    },
    license: {
      name: 'MIT',
      url: 'https://opensource.org/licenses/MIT'
    }
  },
  servers: [
    {
      url: 'http://localhost:' + (process.env.PORT || '8080'),
      description: 'Development server'
    },
    {
      url: 'https://api.example.com',
      description: 'Production server'
    }
  ],
  tags: [
    {
      name: 'health',
      description: 'Health check endpoints'
    },
    {
      name: 'auth',
      description: 'Authentication endpoints'
    }
  ],
  components: {
    securitySchemes: {
      bearerAuth: {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT',
        description: 'JWT Bearer token authentication'
      },
      apiKey: {
        type: 'apiKey',
        in: 'header',
        name: 'X-API-Key',
        description: 'API key authentication'
      }
    },
    schemas: {
      Error: {
        type: 'object',
        properties: {
          error: {
            type: 'string',
            description: 'Error type'
          },
          message: {
            type: 'string',
            description: 'Error message'
          },
          statusCode: {
            type: 'integer',
            description: 'HTTP status code'
          },
          details: {
            type: 'object',
            description: 'Additional error details'
          }
        }
      },
      HealthResponse: {
        type: 'object',
        properties: {
          status: {
            type: 'string',
            enum: ['healthy', 'unhealthy'],
            description: 'Health status'
          },
          timestamp: {
            type: 'string',
            format: 'date-time',
            description: 'Current timestamp'
          },
          uptime: {
            type: 'number',
            description: 'Server uptime in seconds'
          },
          environment: {
            type: 'string',
            enum: ['development', 'test', 'production'],
            description: 'Current environment'
          }
        }
      }
    },
    responses: {
      BadRequest: {
        description: 'Bad request - validation error',
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/Error'
            }
          }
        }
      },
      Unauthorized: {
        description: 'Unauthorized - authentication required',
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/Error'
            }
          }
        }
      },
      Forbidden: {
        description: 'Forbidden - insufficient permissions',
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/Error'
            }
          }
        }
      },
      NotFound: {
        description: 'Resource not found',
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/Error'
            }
          }
        }
      },
      InternalServerError: {
        description: 'Internal server error',
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/Error'
            }
          }
        }
      }
    }
  },
  security: [
    {
      bearerAuth: []
    }
  ]
};

