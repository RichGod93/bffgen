/**
 * nytimes Service
 * Auto-generated by bffgen
 *
 * Handles communication with nytimes backend service
 */

const HttpClient = require("./httpClient");
const logger = require("../utils/logger");

class NytimesService {
  constructor() {
    this.baseURL = process.env.NYTIMES_URL || "https://api.nytimes.com/svc";
    this.client = new HttpClient(this.baseURL, {
      timeout: parseInt(process.env.NYTIMES_TIMEOUT) || 30000,
      retries: parseInt(process.env.NYTIMES_RETRIES) || 3,
    });
  }

  /**
   * GET /topstories/v2/home.json
   *
   */
  async getApiNewsNytimesHeadlines(
    params = {},
    query = {},
    body = null,
    headers = {}
  ) {
    try {
      // Build path with params
      let path = "/topstories/v2/home.json";
      Object.keys(params).forEach((key) => {
        path = path.replace(`:${key}`, params[key]);
      });

      // Inject API key into query parameters
      const enrichedQuery = {
        ...query,
        "api-key": process.env.NYTIMES_API_KEY,
      };

      // Add query string
      const queryString = new URLSearchParams(enrichedQuery).toString();
      if (queryString) {
        path += `?${queryString}`;
      }

      // Forward authorization header if present
      const requestHeaders = {};
      if (headers.authorization || headers.Authorization) {
        requestHeaders.Authorization =
          headers.authorization || headers.Authorization;
      }

      // Make request based on method
      let result;
      switch ("GET") {
        case "GET":
          result = await this.client.get(path, { headers: requestHeaders });
          break;
        case "POST":
          result = await this.client.post(path, body, {
            headers: requestHeaders,
          });
          break;
        case "PUT":
          result = await this.client.put(path, body, {
            headers: requestHeaders,
          });
          break;
        case "PATCH":
          result = await this.client.patch(path, body, {
            headers: requestHeaders,
          });
          break;
        case "DELETE":
          result = await this.client.delete(path, { headers: requestHeaders });
          break;
        default:
          throw new Error(`Unsupported HTTP method: GET`);
      }

      logger.debug(`nytimes.getApiNewsNytimesHeadlines completed successfully`);
      return result;
    } catch (error) {
      logger.error(`nytimes.getApiNewsNytimesHeadlines failed:`, {
        error: error.message,
        status: error.status,
        params,
        query,
      });

      // Transform backend errors to standardized format
      const serviceError = new Error(error.message || "Backend service error");
      serviceError.status = error.status || 500;
      serviceError.service = "nytimes";
      serviceError.operation = "getApiNewsNytimesHeadlines";
      serviceError.originalError = error;

      throw serviceError;
    }
  }

  /**
   * GET /search/v2/articlesearch.json
   *
   */
  async getApiNewsNytimesSearch(
    params = {},
    query = {},
    body = null,
    headers = {}
  ) {
    try {
      // Build path with params
      let path = "/search/v2/articlesearch.json";
      Object.keys(params).forEach((key) => {
        path = path.replace(`:${key}`, params[key]);
      });

      // Inject API key into query parameters
      const enrichedQuery = {
        ...query,
        "api-key": process.env.NYTIMES_API_KEY,
      };

      // Add query string
      const queryString = new URLSearchParams(enrichedQuery).toString();
      if (queryString) {
        path += `?${queryString}`;
      }

      // Forward authorization header if present
      const requestHeaders = {};
      if (headers.authorization || headers.Authorization) {
        requestHeaders.Authorization =
          headers.authorization || headers.Authorization;
      }

      // Make request based on method
      let result;
      switch ("GET") {
        case "GET":
          result = await this.client.get(path, { headers: requestHeaders });
          break;
        case "POST":
          result = await this.client.post(path, body, {
            headers: requestHeaders,
          });
          break;
        case "PUT":
          result = await this.client.put(path, body, {
            headers: requestHeaders,
          });
          break;
        case "PATCH":
          result = await this.client.patch(path, body, {
            headers: requestHeaders,
          });
          break;
        case "DELETE":
          result = await this.client.delete(path, { headers: requestHeaders });
          break;
        default:
          throw new Error(`Unsupported HTTP method: GET`);
      }

      logger.debug(`nytimes.getApiNewsNytimesSearch completed successfully`);
      return result;
    } catch (error) {
      logger.error(`nytimes.getApiNewsNytimesSearch failed:`, {
        error: error.message,
        status: error.status,
        params,
        query,
      });

      // Transform backend errors to standardized format
      const serviceError = new Error(error.message || "Backend service error");
      serviceError.status = error.status || 500;
      serviceError.service = "nytimes";
      serviceError.operation = "getApiNewsNytimesSearch";
      serviceError.originalError = error;

      throw serviceError;
    }
  }
}

module.exports = NytimesService;
