"""
Movies Router - Generated by bffgen
Handles movie-related endpoints
"""
from fastapi import APIRouter, HTTPException, Query
from typing import Optional
import logging

from services.movies_service import MoviesService

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/movies", tags=["Movies"])

# Initialize service
movies_service = MoviesService()


@router.get("/popular")
async def get_popular(
    page: Optional[int] = Query(1, description="Page number")
):
    """
    Get popular movies from TMDB
    
    Args:
        page: Page number for pagination
        
    Returns:
        Popular movies list from TMDB
    """
    try:
        result = await movies_service.get_popular(page=page)
        return result
    except Exception as e:
        logger.error(f"Error fetching popular movies: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/{movie_id}")
async def get_movie_details(movie_id: int):
    """
    Get detailed information about a specific movie
    
    Args:
        movie_id: TMDB movie ID
        
    Returns:
        Detailed movie information
    """
    try:
        result = await movies_service.get_movie_details(movie_id=movie_id)
        return result
    except Exception as e:
        logger.error(f"Error fetching movie details for {movie_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/search")
async def search_movies(
    query: str = Query(..., description="Search query"),
    page: Optional[int] = Query(1, description="Page number")
):
    """
    Search for movies by query
    
    Args:
        query: Search query string
        page: Page number for pagination
        
    Returns:
        Search results from TMDB
    """
    try:
        result = await movies_service.search_movies(query=query, page=page)
        return result
    except Exception as e:
        logger.error(f"Error searching movies with query '{query}': {e}")
        raise HTTPException(status_code=500, detail=str(e))

