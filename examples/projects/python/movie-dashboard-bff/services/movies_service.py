"""
Movies Service - Generated by bffgen
HTTP client for TMDB API backend
"""
import httpx
import logging
from typing import Optional, Dict, Any
from config import settings

logger = logging.getLogger(__name__)


class MoviesService:
    """Service class for TMDB API operations"""
    
    def __init__(self):
        self.base_url = "https://api.themoviedb.org/3"
        self.timeout = 30.0
        self.client = None
    
    async def _get_client(self) -> httpx.AsyncClient:
        """Get or create HTTP client"""
        if self.client is None:
            # Use Bearer token authentication for TMDB
            headers = {
                "Authorization": f"Bearer {settings.TMDB_READ_TOKEN}",
                "Content-Type": "application/json"
            }
            self.client = httpx.AsyncClient(
                timeout=self.timeout,
                headers=headers
            )
        return self.client
    
    async def get_popular(self, page: int = 1) -> Dict[str, Any]:
        """
        Get popular movies from TMDB
        
        Args:
            page: Page number for pagination
            
        Returns:
            API response with popular movies
        """
        client = await self._get_client()
        url = f"{self.base_url}/movie/popular"
        params = {"page": page}
        
        logger.info(f"Fetching popular movies (page {page})")
        response = await client.get(url, params=params)
        response.raise_for_status()
        
        return response.json()
    
    async def get_movie_details(self, movie_id: int) -> Dict[str, Any]:
        """
        Get detailed information about a specific movie
        
        Args:
            movie_id: TMDB movie ID
            
        Returns:
            API response with movie details
        """
        client = await self._get_client()
        url = f"{self.base_url}/movie/{movie_id}"
        params = {"append_to_response": "credits,reviews,similar"}
        
        logger.info(f"Fetching details for movie {movie_id}")
        response = await client.get(url, params=params)
        response.raise_for_status()
        
        return response.json()
    
    async def search_movies(self, query: str, page: int = 1) -> Dict[str, Any]:
        """
        Search for movies by query
        
        Args:
            query: Search query string
            page: Page number for pagination
            
        Returns:
            API response with search results
        """
        client = await self._get_client()
        url = f"{self.base_url}/search/movie"
        params = {"query": query, "page": page}
        
        logger.info(f"Searching movies with query: {query}")
        response = await client.get(url, params=params)
        response.raise_for_status()
        
        return response.json()
    
    async def close(self):
        """Close HTTP client"""
        if self.client:
            await self.client.aclose()

